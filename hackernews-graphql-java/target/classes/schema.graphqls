type Link {
    id:ID!
    url: String!
    description: String!
}

type User{
    id:ID!
    name: String!
    email: String
    password: String
}

type SignInPayload{
  token: String
  user: User
}

type Vote {
    id: ID!
    createdAt: DateTime!
    user: User!
    link: Link!
}

# Using scalar to define a type of data specific
scalar DateTime

input Data{
    email: String!
    password: String!
}

# Login an authentication

# Filtering
input LinkFilter{
  description_contain:String
  url_contain:String
}


# ----------------------------------------------------------------

type Query {
  allLinks: [Link]
  allUsers: [User]
  allLinksFilter(filter:LinkFilter):[Link]
# Filtering with pagination
  allLinksFilterPagination(filter:LinkFilter, skip: Int=0, first:Int=0):[Link]
}

type Mutation{
    createLink(url:String!, description:String!):Link
    signInUser(auth: Data): SignInPayload
    createUser(name:String!, authProvider: Data):User
    createVote(linkId:ID, userId:ID):Vote
}

schema {
  query: Query
  mutation: Mutation
}